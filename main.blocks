<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace renewableEnergy {" line1="" line2="    //% blockId=getEnergy" line3="    //% block=&quot;get energy from pin %pin&quot;" line4="    //% group=&quot;Power Station&quot;" line5="    //% weight=50" line6="    export function getEnergy(pin: AnalogPin) {" line7="        let energy " line8="        energy = pins.analogReadPin(pin)" line9="        if (energy&gt;maxEnergy)" line10="            energy = 0" line11="        return energy" line12="    }" line13="" line14="    //% blockId=sendEnergy" line15="    //% block=&quot;send energy wind %wind solar %solar to grid&quot;    " line16="    //% group=&quot;Power Station&quot;" line17="    //% weight=40" line18="    export function sendEnergy (wind: number, solar: number) {" line19="        serial.writeLine(&quot;#&quot; + wind + &quot;,&quot; + solar + &quot;,&quot; + (wind + solar) + &quot;.&quot;)" line20="        basic.pause(sendEnergyWaitTime)" line21="    }" line22="" line23="    //% blockId=panelMoveLeft" line24="    //% block=&quot;panel move left %steps steps&quot;    " line25="    //% group=&quot;Power Station&quot;" line26="    //% weight=30" line27="    export function panelMoveLeft(steps : number) {" line28="        if (lrAngle &gt; minAngle + servoMoveIncrement * steps)" line29="            lrAngle -= servoMoveIncrement * steps" line30="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo1, lrAngle)" line31="        basic.pause(moveServoWaitTime)" line32="    }" line33="" line34="    //% blockId=panelMoveRight" line35="    //% block=&quot;panel move right %steps steps&quot;    " line36="    //% group=&quot;Power Station&quot;" line37="    //% weight=29" line38="    export function panelMoveRight(steps: number) {" line39="        if (lrAngle &lt; maxAngle - servoMoveIncrement * steps)" line40="            lrAngle += servoMoveIncrement * steps" line41="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo1, lrAngle)" line42="        basic.pause(moveServoWaitTime)" line43="    }" line44="" line45="    //% blockId=panelMoveUp" line46="    //% block=&quot;panel move up %steps steps&quot;" line47="    //% group=&quot;Power Station&quot;" line48="    //% weight=28" line49="    export function panelMoveUp(steps: number) {" line50="        if (udAngle &gt; minAngle + servoMoveIncrement * steps)" line51="            udAngle -= servoMoveIncrement * steps" line52="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo2, udAngle)" line53="        basic.pause(moveServoWaitTime)" line54="    }" line55="" line56="    //% blockId=panelMoveDown" line57="    //% block=&quot;panel move down %steps steps&quot;" line58="    //% group=&quot;Power Station&quot;" line59="    //% weight=27" line60="    export function panelMoveDown(steps: number) {" line61="        if (udAngle &lt; maxAngle - servoMoveIncrement * steps)" line62="            udAngle += servoMoveIncrement * steps" line63="        Kitronik_Robotics_Board.servoWrite(Kitronik_Robotics_Board.Servos.Servo2, udAngle)" line64="        basic.pause(moveServoWaitTime)" line65="    }" line66="" line67="    //% blockId=setServoIncrement" line68="    //% block=&quot;set servo move amount %amount&quot;" line69="    //% group=&quot;Power Station&quot;" line70="    export function setServoIncrement(amount: number) {" line71="        servoMoveIncrement = amount" line72="    }" line73="" line74="    //% blockId=clearDevices" line75="    //% block=&quot;clear devices&quot;" line76="    //% group=&quot;House&quot;" line77="    //% weight=50" line78="    export function clearDevices() {" line79="        serial.writeLine(&quot;clear&quot;)" line80="    }" line81="" line82="    //% blockId=addDevice" line83="    //% block=&quot;add device %name using power %power&quot;" line84="    //% group=&quot;House&quot;" line85="    //% weight=40" line86="    export function addDevice(name: string, power: number) {" line87="        serial.writeLine(name + &quot;=&quot; + power)" line88="        devices[name] = 0" line89="    }" line90="" line91="    //% blockId=ready" line92="    //% block=&quot;ready&quot;" line93="    //% group=&quot;House&quot;" line94="    //% weight=30" line95="    export function ready() {" line96="        serial.writeLine(&quot;ready&quot;)" line97="    }" line98="" line99="" line100="    //% blockId=useEnergy" line101="    //% block=&quot;use energy for device %deviceName on pin %pin&quot;" line102="    //% group=&quot;House&quot;" line103="    //% weight=20" line104="    export function useEnergy(deviceName: string, pin: DigitalPin)  {" line105="        serial.writeLine(&quot;get=&quot; + deviceName)" line106="        let message = serial.readLine()" line107="        let deviceOn = parseInt(message)" line108="        pins.digitalWritePin(pin, deviceOn)" line109="    }" line110="" line111="    //% blockId=checkEnergy" line112="    //% block=&quot;check energy for device %deviceName&quot;" line113="    //% group=&quot;House&quot;" line114="    //% weight=19" line115="    export function checkEnergy(deviceName: string)  {" line116="        serial.writeLine(&quot;get=&quot; + deviceName)" line117="        let message2 = serial.readLine()" line118="        //let deviceOn = parseInt(message)" line119="        const arr = message2.split(&quot;=&quot;);" line120="        devices[arr[0]] = parseInt(arr[1])" line121="        return devices[deviceName]" line122="    }" line123="" line124="" line125="    //% blockId=initialise" line126="    //% block=&quot;initialise&quot;" line127="    //% group=&quot;Both&quot;" line128="    //% weight=50" line129="    export function initialise() {" line130="        serial.setBaudRate(BaudRate.BaudRate9600)" line131="        led.enable(false)" line132="        pins.setPull(DigitalPin.P0, PinPullMode.PullDown)" line133="        pins.setPull(DigitalPin.P1, PinPullMode.PullDown)" line134="        pins.setPull(DigitalPin.P2, PinPullMode.PullDown)" line135="        pins.setPull(DigitalPin.P3, PinPullMode.PullDown)" line136="    }" line137="" line138="    //% blockId=setMaxEnergy" line139="    //% block=&quot;set max energy %energy&quot;" line140="    //% energy.min=0 col.energy=1023" line141="    //% group=&quot;Both&quot;" line142="    //% weight=40" line143="    export function setMaxEnergy(energy: number) {" line144="        maxEnergy = energy" line145="    }" line146="" line147="    //% blockId=setSendEnergyWaitTime" line148="    //% block=&quot;set send energy wait time %time&quot;" line149="    //% group=&quot;Both&quot;" line150="    //% weight=30" line151="    export function setSendEnergyWaitTime(time: number) {" line152="        sendEnergyWaitTime = time" line153="    }" line154="" line155="    //% blockId=setMoveServoWaitTime" line156="    //% block=&quot;set move servo wait time %time&quot;" line157="    //% group=&quot;Both&quot;" line158="    //% weight=20" line159="    export function setMoveServoWaitTime(time: number) {" line160="        moveServoWaitTime = time" line161="    }" line162="" line163="    //% blockId=servoMoveIncrement" line164="    //% block=&quot;set servo move increment %angle&quot;" line165="    //% group=&quot;Both&quot;" line166="    //% weight=10" line167="    export function setServoMoveIncrement(angle: number) {" line168="        servoMoveIncrement = angle" line169="    }" line170="" line171="" line172="    //% blockId=version" line173="    //% block=&quot;version6&quot;" line174="    //% group=&quot;Both&quot;" line175="    //% weight=1" line176="    export function version7() {" line177="    }" line178="" line179="" line180="" line181="" line182="    // Globals" line183="    let maxEnergy = 1023" line184="" line185="    let lrAngle = 90                // current angle for left-right servo" line186="    let udAngle = 90                // current angle for up-down servro" line187="    let minAngle = 20               // min allowed angle for servo" line188="    let maxAngle = 160              // max allowed angle for servo" line189="    let servoMoveIncrement = 10     // amount to move servo " line190="" line191="    let sendEnergyWaitTime = 1000       // time to wait after sending energy, so we don't send too much" line192="    let moveServoWaitTime = 300         // time to wait after moving a servo" line193="" line194="    serial.setBaudRate(BaudRate.BaudRate9600)" line195="" line196="    let devices: { [id: string] : number;} = {};" line197="}" numlines="198"></mutation></block></statement></block><block type="argument_reporter_number" disabled="true" x="634" y="47"><field name="VALUE">wind</field></block></xml>